{
  "name": "wunderground",
  "version": "0.0.0",
  "author": {
    "name": "Michael Kelly",
    "email": "m@michaelckelly.com"
  },
  "description": "a simple wrapper around the wunderground API",
  "repository": {
    "type": "git",
    "url": "https://github.com/mck9235/wunderground.git"
  },
  "engines": {
    "node": ">=0.6"
  },
  "dependencies": {
    "request": "~2.34.0"
  },
  "devDependencies": {
    "mocha": ">=0.1",
    "should": "~3.3.1"
  },
  "readme": "wunderground\n============\nA simple wrapper around the [Wunderground API](http://www.wunderground.com/weather/api) for Node.\n\nInstallation\n============\nInstallation is quick and easy via NPM:\n```\nnpm install wunderground\n```\n\nYou will also need a valid [Wunderground API key](http://www.wunderground.com/weather/api).\n\nWhy?\n====\nBecuase spending more than a few minutes getting this API up-and-running is better spent making your app awesome.\n\nThere are a few other modules out there that integrate the Wunderground API but I wasn't quite satisifed with them. \n\nUsage\n=====\nThe module is designed to be simple and easy to use and follows Wunderground's API verbiage almost exclusively.  Please see the Wunderground documentation for a list of all available options.\n\n```javascript\nvar wunderground = require('node-wunderground')('my-api-key');\n\nvar query = {\n\tcity  : 'San Francisco',\n\tstate : 'CA' // two-letter state code\n};\n\n// Print San Francisco's high and low temperatures for the next 10 days\nwunderground.forecast10day(query, function(err, forecasts) {\n\tif(err) {\n\t\t// uh-oh!\n\t} else {\n\t\tvar forecasts = res.forecast.simpleforecast.forecastday;\n\t\tfor(var i = 0; i < forecasts.length; i++) {\n\t\t\tvar f = forecasts[i];\n\t\t\tconsole.log([f.date.month, f.date.day, f.date.year].join('/') + ' - High: '+ f.high.fahrenheit +', Low: '+ f.low.fahrenheit);\n\t\t}\n\t}});\n\n// OR:\n\nwunderground.conditions(query, function(err, conditions) {\n\t// current conditions\n\tif(!err) {\n\t\tconsole.log('In Sanfrancisco, CA, it currently feels like '+ conditions.current_observation.temp_f);\n\t}\n});\n```\n\n\nThe module accepts a variety of parameters in the query object (formal paramater names included in parenthesis if different):\n* zip\n* city\n* state\n* airport code (airport)\n* PWS code (pws)\n* country\n* latitude (lat)\n* longitude (lng)\n\nNOTE: Latitude and longitude BOTH required.  Providing only one is illegal.  \n\nYou can provide any number of parameters but there is a precedence and established patterns:\n* city & state\n* zip\n* country & city\n* lat & lng\n* airport\n* pws\n* country\n\nAdvanced Usage\n==============\nYou can also acess the `wunderground.execute` method directly--the main advantage of this is you can specify multiple data sources to receive in a single request.\n\nFor example:\n```javascript\nvar query = {\n\tzip : '20854'\n};\nvar actions = ['forecast', 'forecast10day', 'conditions'];\nwunderground.execute(actions, query, function(err, result) {\n\t// Result has the current forecast, the 10 day forecast, and the current conditions for the US zip code 20854.\n});\n```\n\nLocalization\n============\nThe Wunderground API provides results in a large range of languages.  You can specify the language for API requests on initlaization.  Example:\n```javascript\nvar wunderground = require('node-wunderground')('my-api-key', 'FR');\n```\nAll requests will be returned in French.  All languages are specified with a two letter, capitalized string.  See the [official documentation](http://www.wunderground.com/weather/api/d/docs?d=language-support) for the full list.\n\nLicense & Disclaimer\n====================\nAll usage of the Wunderground API is subjet to the API's terms of service, which can be found at: [http://www.wunderground.com/weather/api/d/terms.html](http://www.wunderground.com/weather/api/d/terms.html)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mck9235/wunderground/issues"
  },
  "_id": "wunderground@0.0.0",
  "dist": {
    "shasum": "da317a990ace1e4b97c8033e86534ce74b2e253c"
  },
  "_from": "wunderground@",
  "_resolved": "https://registry.npmjs.org/wunderground/-/wunderground-0.0.0.tgz"
}
